-- MySQL Script generated by MySQL Workbench
-- Thu 04 Sep 2025 07:11:31 AM EDT
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
-- -----------------------------------------------------
-- Schema school_sys
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema school_sys
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `school_sys` ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`docent_ticket`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`docent_ticket` (
  `d_ticketnr` INT NOT NULL AUTO_INCREMENT,
  `verloopdatum` DATE NOT NULL,
  `aanmaaksdatum` DATE NOT NULL,
  PRIMARY KEY (`d_ticketnr`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`account`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`account` (
  `accountnr` INT NOT NULL,
  `aanmaakstijd` TIME NOT NULL,
  `wachtwoord` VARCHAR(80) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `isDocent` TINYINT NOT NULL,
  PRIMARY KEY (`accountnr`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`docent`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`docent` (
  `docentnr` INT NOT NULL AUTO_INCREMENT,
  `voornaam` VARCHAR(50) NOT NULL,
  `achternaam` VARCHAR(50) NOT NULL,
  `telefoonnr` VARCHAR(11) NOT NULL,
  `geslacht` CHAR(1) NOT NULL,
  `postcode` VARCHAR(20) NOT NULL,
  `adres` VARCHAR(25) NOT NULL,
  `docent_ticket_d_ticketnr` INT NOT NULL,
  `account_accountnr` INT NOT NULL,
  PRIMARY KEY (`docentnr`, `docent_ticket_d_ticketnr`, `account_accountnr`),
  INDEX `fk_docent_docent_ticket_idx` (`docent_ticket_d_ticketnr` ASC) VISIBLE,
  INDEX `fk_docent_account1_idx` (`account_accountnr` ASC) VISIBLE,
  CONSTRAINT `fk_docent_docent_ticket`
    FOREIGN KEY (`docent_ticket_d_ticketnr`)
    REFERENCES `mydb`.`docent_ticket` (`d_ticketnr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_docent_account1`
    FOREIGN KEY (`account_accountnr`)
    REFERENCES `mydb`.`account` (`accountnr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`student_ticket`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`student_ticket` (
  `ticketnr` INT NOT NULL AUTO_INCREMENT,
  `verloopdatum` DATE NOT NULL,
  `aanmaaksdatum` DATE NOT NULL,
  PRIMARY KEY (`ticketnr`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`docent_has_student_ticket`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`docent_has_student_ticket` (
  `docent_docentnr` INT NOT NULL,
  `docent_docent_ticket_d_ticketnr` INT NOT NULL,
  `student_ticket_ticketnr` INT NOT NULL,
  PRIMARY KEY (`docent_docentnr`, `docent_docent_ticket_d_ticketnr`, `student_ticket_ticketnr`),
  INDEX `fk_docent_has_student_ticket_student_ticket1_idx` (`student_ticket_ticketnr` ASC) VISIBLE,
  INDEX `fk_docent_has_student_ticket_docent1_idx` (`docent_docentnr` ASC, `docent_docent_ticket_d_ticketnr` ASC) VISIBLE,
  CONSTRAINT `fk_docent_has_student_ticket_docent1`
    FOREIGN KEY (`docent_docentnr` , `docent_docent_ticket_d_ticketnr`)
    REFERENCES `mydb`.`docent` (`docentnr` , `docent_ticket_d_ticketnr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_docent_has_student_ticket_student_ticket1`
    FOREIGN KEY (`student_ticket_ticketnr`)
    REFERENCES `mydb`.`student_ticket` (`ticketnr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`vak`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`vak` (
  `vaknr` INT NOT NULL AUTO_INCREMENT,
  `vaktype` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`vaknr`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`student`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`student` (
  `studentnr` INT NOT NULL AUTO_INCREMENT,
  `voornaam` VARCHAR(30) NOT NULL,
  `achternaam` VARCHAR(30) NOT NULL,
  `adres` VARCHAR(100) NOT NULL,
  `telefoonnr` VARCHAR(11) NOT NULL,
  `geboortedatum` DATE NOT NULL,
  `klas` VARCHAR(45) NOT NULL,
  `geslacht` CHAR(1) NOT NULL,
  `postcode` VARCHAR(20) NOT NULL,
  `student_ticket_ticketnr` INT NOT NULL,
  `account_accountnr` INT NOT NULL,
  PRIMARY KEY (`studentnr`, `student_ticket_ticketnr`, `account_accountnr`),
  INDEX `fk_student_student_ticket1_idx` (`student_ticket_ticketnr` ASC) VISIBLE,
  INDEX `fk_student_account1_idx` (`account_accountnr` ASC) VISIBLE,
  CONSTRAINT `fk_student_student_ticket1`
    FOREIGN KEY (`student_ticket_ticketnr`)
    REFERENCES `mydb`.`student_ticket` (`ticketnr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_student_account1`
    FOREIGN KEY (`account_accountnr`)
    REFERENCES `mydb`.`account` (`accountnr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`student_has_vak`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`student_has_vak` (
  `student_studentnr` INT NOT NULL,
  `student_student_ticket_ticketnr` INT NOT NULL,
  `vak_vaknr` INT NOT NULL,
  PRIMARY KEY (`student_studentnr`, `student_student_ticket_ticketnr`, `vak_vaknr`),
  INDEX `fk_student_has_vak_vak1_idx` (`vak_vaknr` ASC) VISIBLE,
  INDEX `fk_student_has_vak_student1_idx` (`student_studentnr` ASC, `student_student_ticket_ticketnr` ASC) VISIBLE,
  CONSTRAINT `fk_student_has_vak_student1`
    FOREIGN KEY (`student_studentnr` , `student_student_ticket_ticketnr`)
    REFERENCES `mydb`.`student` (`studentnr` , `student_ticket_ticketnr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_student_has_vak_vak1`
    FOREIGN KEY (`vak_vaknr`)
    REFERENCES `mydb`.`vak` (`vaknr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`administrator`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`administrator` (
  `adminID` INT NOT NULL,
  `isAdmin` TINYINT NOT NULL,
  `wachtwoord` VARCHAR(50) NOT NULL,
  `account_accountnr` INT NOT NULL,
  `student_studentnr` INT NOT NULL,
  `student_student_ticket_ticketnr` INT NOT NULL,
  `student_account_accountnr` INT NOT NULL,
  `docent_docentnr` INT NOT NULL,
  `docent_docent_ticket_d_ticketnr` INT NOT NULL,
  `docent_account_accountnr` INT NOT NULL,
  `student_ticket_ticketnr` INT NOT NULL,
  `docent_ticket_d_ticketnr` INT NOT NULL,
  PRIMARY KEY (`adminID`, `account_accountnr`),
  INDEX `fk_administrator_account1_idx` (`account_accountnr` ASC) VISIBLE,
  INDEX `fk_administrator_student1_idx` (`student_studentnr` ASC, `student_student_ticket_ticketnr` ASC, `student_account_accountnr` ASC) VISIBLE,
  INDEX `fk_administrator_docent1_idx` (`docent_docentnr` ASC, `docent_docent_ticket_d_ticketnr` ASC, `docent_account_accountnr` ASC) VISIBLE,
  INDEX `fk_administrator_student_ticket1_idx` (`student_ticket_ticketnr` ASC) VISIBLE,
  INDEX `fk_administrator_docent_ticket1_idx` (`docent_ticket_d_ticketnr` ASC) VISIBLE,
  CONSTRAINT `fk_administrator_account1`
    FOREIGN KEY (`account_accountnr`)
    REFERENCES `mydb`.`account` (`accountnr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_administrator_student1`
    FOREIGN KEY (`student_studentnr` , `student_student_ticket_ticketnr` , `student_account_accountnr`)
    REFERENCES `mydb`.`student` (`studentnr` , `student_ticket_ticketnr` , `account_accountnr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_administrator_docent1`
    FOREIGN KEY (`docent_docentnr` , `docent_docent_ticket_d_ticketnr` , `docent_account_accountnr`)
    REFERENCES `mydb`.`docent` (`docentnr` , `docent_ticket_d_ticketnr` , `account_accountnr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_administrator_student_ticket1`
    FOREIGN KEY (`student_ticket_ticketnr`)
    REFERENCES `mydb`.`student_ticket` (`ticketnr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_administrator_docent_ticket1`
    FOREIGN KEY (`docent_ticket_d_ticketnr`)
    REFERENCES `mydb`.`docent_ticket` (`d_ticketnr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `school_sys` ;

-- -----------------------------------------------------
-- Table `school_sys`.`student_has_docent_ticket`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `school_sys`.`student_has_docent_ticket` (
  `student_studentnr` VARCHAR(30) NOT NULL,
  `student_student_ticket_ticketnr` INT NOT NULL,
  `docent_ticket_d_ticketnr` INT NOT NULL,
  PRIMARY KEY (`student_studentnr`, `student_student_ticket_ticketnr`, `docent_ticket_d_ticketnr`),
  INDEX `fk_student_has_docent_ticket_docent_ticket1_idx` (`docent_ticket_d_ticketnr` ASC) VISIBLE,
  CONSTRAINT `fk_student_has_docent_ticket_docent_ticket1`
    FOREIGN KEY (`docent_ticket_d_ticketnr`)
    REFERENCES `mydb`.`docent_ticket` (`d_ticketnr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
